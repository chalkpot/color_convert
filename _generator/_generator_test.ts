// Copyright 2023 mineejo. All rights reserved. MIT license.

// deno-lint-ignore-file no-explicit-any

import { assertEquals } from "../dev_deps.ts";
import { cmyToRgb } from "./cmy/cmy_to_rgb.ts";
import { rgbToCmy } from "./rgb/rgb_to_cmy.ts";
import { cmykToRgb } from "./cmyk/cmyk_to_rgb.ts";
import { rgbToCmyk } from "./rgb/rgb_to_cmyk.ts";
import { hexToRgb } from "./hex/hex_to_rgb.ts";
import { rgbToHex } from "./rgb/rgb_to_hex.ts";
import { hsbToRgb } from "./hsb/hsb_to_rgb.ts";
import { rgbToHsb } from "./rgb/rgb_to_hsb.ts";
import { hslToRgb } from "./hsl/hsl_to_rgb.ts";
import { rgbToHsl } from "./rgb/rgb_to_hsl.ts";
import { hsvToRgb } from "./hsv/hsv_to_rgb.ts";
import { rgbToHsv } from "./rgb/rgb_to_hsv.ts";
import { xyzToRgb } from "./xyz/xyz_to_rgb.ts";
import { rgbToXyz } from "./rgb/rgb_to_xyz.ts";
import { labToRgb } from "./lab/lab_to_rgb.ts";
import { rgbToLab } from "./rgb/rgb_to_lab.ts";

export function roundComponents(
  components: number[],
  digits = 0,
): number[] {
  return components.map((component: number) => {
    const n = Number("1".padEnd(digits, "0"));
    const rounded: number = Math.round(component * n);

    return rounded / n;
  });
}

const rgbColors: number[][] = [
  [0, 0, 0],
  [0, 0, 51],
  [0, 0, 102],
  [0, 0, 153],
  [0, 0, 204],
  [0, 0, 255],
  [0, 51, 0],
  [0, 51, 51],
  [0, 51, 102],
  [0, 51, 153],
  [0, 51, 204],
  [0, 51, 255],
  [0, 102, 0],
  [0, 102, 51],
  [0, 102, 102],
  [0, 102, 153],
  [0, 102, 204],
  [0, 102, 255],
  [0, 153, 0],
  [0, 153, 51],
  [0, 153, 102],
  [0, 153, 153],
  [0, 153, 204],
  [0, 153, 255],
  [0, 204, 0],
  [0, 204, 51],
  [0, 204, 102],
  [0, 204, 153],
  [0, 204, 204],
  [0, 204, 255],
  [0, 255, 0],
  [0, 255, 51],
  [0, 255, 102],
  [0, 255, 153],
  [0, 255, 204],
  [0, 255, 255],
  [51, 0, 0],
  [51, 0, 51],
  [51, 0, 102],
  [51, 0, 153],
  [51, 0, 204],
  [51, 0, 255],
  [51, 51, 0],
  [51, 51, 51],
  [51, 51, 102],
  [51, 51, 153],
  [51, 51, 204],
  [51, 51, 255],
  [51, 102, 0],
  [51, 102, 51],
  [51, 102, 102],
  [51, 102, 153],
  [51, 102, 204],
  [51, 102, 255],
  [51, 153, 0],
  [51, 153, 51],
  [51, 153, 102],
  [51, 153, 153],
  [51, 153, 204],
  [51, 153, 255],
  [51, 204, 0],
  [51, 204, 51],
  [51, 204, 102],
  [51, 204, 153],
  [51, 204, 204],
  [51, 204, 255],
  [51, 255, 0],
  [51, 255, 51],
  [51, 255, 102],
  [51, 255, 153],
  [51, 255, 204],
  [51, 255, 255],
  [102, 0, 0],
  [102, 0, 51],
  [102, 0, 102],
  [102, 0, 153],
  [102, 0, 204],
  [102, 0, 255],
  [102, 51, 0],
  [102, 51, 51],
  [102, 51, 102],
  [102, 51, 153],
  [102, 51, 204],
  [102, 51, 255],
  [102, 102, 0],
  [102, 102, 51],
  [102, 102, 102],
  [102, 102, 153],
  [102, 102, 204],
  [102, 102, 255],
  [102, 153, 0],
  [102, 153, 51],
  [102, 153, 102],
  [102, 153, 153],
  [102, 153, 204],
  [102, 153, 255],
  [102, 204, 0],
  [102, 204, 51],
  [102, 204, 102],
  [102, 204, 153],
  [102, 204, 204],
  [102, 204, 255],
  [102, 255, 0],
  [102, 255, 51],
  [102, 255, 102],
  [102, 255, 153],
  [102, 255, 204],
  [102, 255, 255],
  [153, 0, 0],
  [153, 0, 51],
  [153, 0, 102],
  [153, 0, 153],
  [153, 0, 204],
  [153, 0, 255],
  [153, 51, 0],
  [153, 51, 51],
  [153, 51, 102],
  [153, 51, 153],
  [153, 51, 204],
  [153, 51, 255],
  [153, 102, 0],
  [153, 102, 51],
  [153, 102, 102],
  [153, 102, 153],
  [153, 102, 204],
  [153, 102, 255],
  [153, 153, 0],
  [153, 153, 51],
  [153, 153, 102],
  [153, 153, 153],
  [153, 153, 204],
  [153, 153, 255],
  [153, 204, 0],
  [153, 204, 51],
  [153, 204, 102],
  [153, 204, 153],
  [153, 204, 204],
  [153, 204, 255],
  [153, 255, 0],
  [153, 255, 51],
  [153, 255, 102],
  [153, 255, 153],
  [153, 255, 204],
  [153, 255, 255],
  [204, 0, 0],
  [204, 0, 51],
  [204, 0, 102],
  [204, 0, 153],
  [204, 0, 204],
  [204, 0, 255],
  [204, 51, 0],
  [204, 51, 51],
  [204, 51, 102],
  [204, 51, 153],
  [204, 51, 204],
  [204, 51, 255],
  [204, 102, 0],
  [204, 102, 51],
  [204, 102, 102],
  [204, 102, 153],
  [204, 102, 204],
  [204, 102, 255],
  [204, 153, 0],
  [204, 153, 51],
  [204, 153, 102],
  [204, 153, 153],
  [204, 153, 204],
  [204, 153, 255],
  [204, 204, 0],
  [204, 204, 51],
  [204, 204, 102],
  [204, 204, 153],
  [204, 204, 204],
  [204, 204, 255],
  [204, 255, 0],
  [204, 255, 51],
  [204, 255, 102],
  [204, 255, 153],
  [204, 255, 204],
  [204, 255, 255],
  [255, 0, 0],
  [255, 0, 51],
  [255, 0, 102],
  [255, 0, 153],
  [255, 0, 204],
  [255, 0, 255],
  [255, 51, 0],
  [255, 51, 51],
  [255, 51, 102],
  [255, 51, 153],
  [255, 51, 204],
  [255, 51, 255],
  [255, 102, 0],
  [255, 102, 51],
  [255, 102, 102],
  [255, 102, 153],
  [255, 102, 204],
  [255, 102, 255],
  [255, 153, 0],
  [255, 153, 51],
  [255, 153, 102],
  [255, 153, 153],
  [255, 153, 204],
  [255, 153, 255],
  [255, 204, 0],
  [255, 204, 51],
  [255, 204, 102],
  [255, 204, 153],
  [255, 204, 204],
  [255, 204, 255],
  [255, 255, 0],
  [255, 255, 51],
  [255, 255, 102],
  [255, 255, 153],
  [255, 255, 204],
  [255, 255, 255],
];

export function testConversion(
  someToRgb: (...args: any[]) => any[],
  rgbToSome: (...args: any[]) => any[],
): void {
  let index = 0;
  for (let red = 0; red < 256; red += 51) {
    for (let green = 0; green < 256; green += 51) {
      for (let blue = 0; blue < 256; blue += 51) {
        const args: any[] = rgbToSome(red, green, blue);

        assertEquals(
          roundComponents(someToRgb(args[0], args[1], args[2], args[3])),
          rgbColors[index],
          `"${someToRgb.name} -> ${rgbToSome.name}"`,
        );

        index++;
      }
    }
  }
}

Deno.test("conversion of other models correct", () => {
  testConversion(cmyToRgb, rgbToCmy);
  testConversion(cmykToRgb, rgbToCmyk);
  testConversion(hexToRgb, rgbToHex);
  testConversion(hsbToRgb, rgbToHsb);
  testConversion(hsvToRgb, rgbToHsv);
  testConversion(hslToRgb, rgbToHsl);
  testConversion(xyzToRgb, rgbToXyz);
  testConversion(labToRgb, rgbToLab);
});
